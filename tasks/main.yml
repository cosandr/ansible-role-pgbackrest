---

- name: Install pgbackrest
  yum:
    name: pgbackrest
    state: present
  tags: ["install"]

- name: Copy pgbackrest config
  template:
    src: pgbackrest.conf.j2
    dest: /etc/pgbackrest.conf
    owner: "{{ pgbackrest_owner }}"
    group: "{{ pgbackrest_owner }}"
    mode: 0600
  notify: reconfigure pgbackrest

- name: Configure services
  template:
    src: pgbackrest.service.j2
    dest: "/etc/systemd/system/pgbackrest-{{ name }}-{{ backup_type }}.service"
    owner: root
    group: root
    mode: 0644
  vars:
    name: "{{ item.0.name }}"
    backup_type: "{{ item.1.backup_type }}"
  loop: "{{ pgbackrest_stanzas | subelements('schedules', skip_missing=True) }}"
  loop_control:
    label: "{{ name }} [{{ backup_type }}]"
  notify: reload systemd

- name: Configure timers
  template:
    src: pgbackrest.timer.j2
    dest: "/etc/systemd/system/pgbackrest-{{ name }}-{{ backup_type }}.timer"
    owner: root
    group: root
    mode: 0644
  vars:
    name: "{{ item.0.name }}"
    backup_type: "{{ item.1.backup_type }}"
    oncalendar: "{{ item.1.oncalendar }}"
  loop: "{{ pgbackrest_stanzas | subelements('schedules', skip_missing=True) }}"
  loop_control:
    label: "{{ name }} [{{ backup_type }}]"
  register: __installed_timers
  notify: reload systemd

- name: Flush handlers
  meta: flush_handlers

- name: Configure pgbackrest timers
  systemd:
    name: "{{ name }}"
    state: "{{ 'started' if pgbackrest_timer_enabled else 'stopped' }}"
    enabled: "{{ pgbackrest_timer_enabled }}"
  vars:
    # item.invocation.dest in check mode
    name: "{{ item.dest | default(item.invocation.dest) | basename }}"
  loop: "{{ __installed_timers.results }}"
  loop_control:
    label: "{{ name }}"
  when:
    - __installed_timers is defined
    - item.dest is defined or item.invocation.dest is defined
