---

- name: create stanzas
  listen: reconfigure pgbackrest
  become: true
  become_user: "{{ pgbackrest_owner }}"
  command: pgbackrest --stanza={{ item.name }} stanza-create
  loop: "{{ pgbackrest_stanzas }}"
  loop_control:
    label: "{{ item.name }}"
  # molecule doesn't have postgres running
  when:
    - "'notest' not in ansible_skip_tags"
    - "'recovery-option' not in item.get('extra', {})"

- block:
    - name: stop database
      listen: reconfigure pgbackrest
      systemd:
        name: "postgresql-{{ postgresql_version }}"
        state: stopped

    - name: restore standby
      listen: reconfigure pgbackrest
      become: true
      become_user: "{{ pgbackrest_owner }}"
      command: pgbackrest --stanza={{ item.name }} --repo={{ item.restore_repo | default('1') }} --delta --type=standby restore
      loop: "{{ pgbackrest_stanzas }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - "'recovery-option' in item.get('extra', {})"

    - name: start database
      listen: reconfigure pgbackrest
      systemd:
        name: "postgresql-{{ postgresql_version }}"
        state: started
  when:
    - "'notest' not in ansible_skip_tags"
    # Only run if there's at least one stanza with recovery-option set
    - pgbackrest_stanzas | json_query('[*].extra."recovery-option"')
    - pgbackrest_restore_standby | bool

- name: reload systemd
  systemd:
    daemon_reload: true

- name: configure pgbackrest timers
  systemd:
    name: "{{ name }}"
    state: "{{ if pgbackrest_timer_enabled 'started' else 'stopped' }}"
    enabled: "{{ pgbackrest_timer_enabled }}"
  vars:
    # item.invocation.dest in check mode
    name: "{{ item.dest | default(item.invocation.dest) | basename }}"
  loop: "{{ __installed_timers.results }}"
  loop_control:
    label: "{{ name }}"
  when:
    - __installed_timers is defined
    - item.dest is defined or item.invocation.dest is defined
